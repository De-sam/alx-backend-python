"""
Django settings for messaging_app project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-p+(pk4#xbj(j5k$_81#7g88#j)a!@i(vonnf@w@6j5=87k68y)"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# define all the models to be used in the project
AUTH_USER_MODEL = "chats.User"  # overrides the default user model
AUTH_CONVERSATION_MODEL = "chats.Conversation"  # overrides the default conversation model

AUTH_MESSAGE_MODEL = "chats.Message"  # overrides the default message model
AUTH_CHAT_MODEL = "chats.Chat"  # overrides the default chat model

# This is where users will be redirected for login if they need to authenticate
# before authorizing an application. You can point this to Django's built-in
# admin login or a custom login view.
LOGIN_URL = '/admin/login/' # Or '/accounts/login/' if you have a custom login app

OAUTH2_PROVIDER = {
    # Specify the grant types your authorization server will support.
    # We are explicitly enabling 'authorization_code' for PKCE.
    'ALLOWED_GRANT_TYPES': ['authorization_code', 'refresh_token'], # Include refresh_token for seamless experience

    # Enforce PKCE for authorization code grant. THIS IS CRUCIAL FOR SECURITY.
    'PKCE_REQUIRED': True,

    # Token expiration settings (in seconds)
    # Good practice is short-lived access tokens and longer-lived refresh tokens.
    'ACCESS_TOKEN_EXPIRE_SECONDS': 60 * 60,  # 1 hour (adjust as needed)
    'REFRESH_TOKEN_EXPIRE_SECONDS': 60 * 60 * 24 * 7, # 1 week (adjust as needed)
    
    # Define your OAuth2 scopes. These will be used to control access to API resources.
    # For a messaging app, examples could be:
    'SCOPES': {
        'read:messages': 'Read user messages',
        'send:messages': 'Send messages on behalf of the user',
        'manage:conversations': 'Create, update, or delete conversations',
        # Add more specific scopes as your messaging app grows
    },

    # Recommended: Set the allowed redirect URI schemes to only HTTPS in production.
    # For local development, you might need 'http' if not using HTTPS locally.
    'ALLOWED_REDIRECT_URI_SCHEMES': ['https', 'http'], # In production, highly recommend ['https'] only
    
    # Set to True if you want a new refresh token issued with each access token refresh.
    # This is a good security practice (Refresh Token Rotation).
    'ROTATE_REFRESH_TOKEN': True,
}
# rest framework settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [

        # Use OAuth2Authentication for API endpoints protected by OAuth2
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        
        "rest_framework.authentication.SessionAuthentication",  # Web-based login (admin, browsable API)
        "rest_framework.authentication.BasicAuthentication",  # Base64 username:password (for testing)
        # 'rest_framework.authentication.TokenAuthentication',   # Uncomment if using token auth
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',  # Uncomment if using JWT
    ],
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],

    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),

    # Optional: browsable API for development
    # 'DEFAULT_RENDERER_CLASSES': (
    #     'rest_framework.renderers.JSONRenderer',
    #     'rest_framework.renderers.BrowsableAPIRenderer',
    # )
     # Add these lines for global pagination settings
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20, # Default page size for all paginated views, as required by the test.

    
}

# Set environment variable for insecure transport if running with http locally
# In a production environment, you should always use HTTPS.
# Add this ONLY if you are testing with http:// for redirect URIs and your server is not HTTPS.
# If you are using 'http' in ALLOWED_REDIRECT_URI_SCHEMES, you will need this for testing.
os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1' 
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # my apps
    "messaging_app",
    "corsheaders",
    "chats",
    "user",
    "uploads",
    "message",
    # 'conversation',
    # third party apps
    "rest_framework",
    "oauth2_provider",
    "django_filters",
]

MIDDLEWARE = [
    # cors - MUST be first middleware
    "corsheaders.middleware.CorsMiddleware",
    # django
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",    
    
    #lock down app on off time period
    'chats.middleware.RestrictAccessByTimeMiddleware',
    
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # role based permission
    'chats.middleware.RolepermissionMiddleware',
    #rate limit message
    'chats.middleware.OffensiveLanguageMiddleware',
    #log request
    'chats.middleware.RequestLoggingMiddleware',

]
ROOT_URLCONF = "messaging_app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "messaging_app.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'chats': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': True,
        },
        'oauth2_provider': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': True,
        },
    },
}
